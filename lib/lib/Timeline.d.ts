export default class ReactCalendarTimeline extends React.Component<any, any, any> {
    static propTypes: {
        groups: PropTypes.Validator<object>;
        items: PropTypes.Validator<object>;
        sidebarWidth: PropTypes.Requireable<number>;
        rightSidebarWidth: PropTypes.Requireable<number>;
        dragSnap: PropTypes.Requireable<number>;
        minResizeWidth: PropTypes.Requireable<number>;
        lineHeight: PropTypes.Requireable<number>;
        itemHeightRatio: PropTypes.Requireable<number>;
        minZoom: PropTypes.Requireable<number>;
        maxZoom: PropTypes.Requireable<number>;
        buffer: PropTypes.Requireable<number>;
        clickTolerance: PropTypes.Requireable<number>;
        canChangeGroup: PropTypes.Requireable<boolean>;
        canMove: PropTypes.Requireable<boolean>;
        canResize: PropTypes.Requireable<string | boolean>;
        useResizeHandle: PropTypes.Requireable<boolean>;
        canSelect: PropTypes.Requireable<boolean>;
        stackItems: PropTypes.Requireable<boolean>;
        traditionalZoom: PropTypes.Requireable<boolean>;
        itemTouchSendsClick: PropTypes.Requireable<boolean>;
        horizontalLineClassNamesForGroup: PropTypes.Requireable<(...args: any[]) => any>;
        onItemMove: PropTypes.Requireable<(...args: any[]) => any>;
        onItemResize: PropTypes.Requireable<(...args: any[]) => any>;
        onItemClick: PropTypes.Requireable<(...args: any[]) => any>;
        onItemSelect: PropTypes.Requireable<(...args: any[]) => any>;
        onItemDeselect: PropTypes.Requireable<(...args: any[]) => any>;
        onCanvasClick: PropTypes.Requireable<(...args: any[]) => any>;
        onItemDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
        onItemContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        onCanvasDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
        onCanvasContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        onZoom: PropTypes.Requireable<(...args: any[]) => any>;
        onItemDrag: PropTypes.Requireable<(...args: any[]) => any>;
        moveResizeValidator: PropTypes.Requireable<(...args: any[]) => any>;
        itemRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        groupRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        keys: PropTypes.Requireable<PropTypes.InferProps<{
            groupIdKey: PropTypes.Requireable<string>;
            groupTitleKey: PropTypes.Requireable<string>;
            groupLabelKey: PropTypes.Requireable<string>;
            groupRightTitleKey: PropTypes.Requireable<string>;
            itemIdKey: PropTypes.Requireable<string>;
            itemTitleKey: PropTypes.Requireable<string>;
            itemDivTitleKey: PropTypes.Requireable<string>;
            itemGroupKey: PropTypes.Requireable<string>;
            itemTimeStartKey: PropTypes.Requireable<string>;
            itemTimeEndKey: PropTypes.Requireable<string>;
        }>>;
        headerRef: PropTypes.Requireable<(...args: any[]) => any>;
        scrollRef: PropTypes.Requireable<(...args: any[]) => any>;
        timeSteps: PropTypes.Requireable<PropTypes.InferProps<{
            second: PropTypes.Requireable<number>;
            minute: PropTypes.Requireable<number>;
            hour: PropTypes.Requireable<number>;
            day: PropTypes.Requireable<number>;
            month: PropTypes.Requireable<number>;
            year: PropTypes.Requireable<number>;
        }>>;
        defaultTimeStart: PropTypes.Requireable<object>;
        defaultTimeEnd: PropTypes.Requireable<object>;
        visibleTimeStart: PropTypes.Requireable<number>;
        visibleTimeEnd: PropTypes.Requireable<number>;
        onTimeChange: PropTypes.Requireable<(...args: any[]) => any>;
        onBoundsChange: PropTypes.Requireable<(...args: any[]) => any>;
        selected: PropTypes.Requireable<any[]>;
        headerLabelFormats: PropTypes.Requireable<PropTypes.InferProps<{
            yearShort: PropTypes.Requireable<string>;
            yearLong: PropTypes.Requireable<string>;
            monthShort: PropTypes.Requireable<string>;
            monthMedium: PropTypes.Requireable<string>;
            monthMediumLong: PropTypes.Requireable<string>;
            monthLong: PropTypes.Requireable<string>;
            dayShort: PropTypes.Requireable<string>;
            dayLong: PropTypes.Requireable<string>;
            hourShort: PropTypes.Requireable<string>;
            hourMedium: PropTypes.Requireable<string>;
            hourMediumLong: PropTypes.Requireable<string>;
            hourLong: PropTypes.Requireable<string>;
        }>>;
        subHeaderLabelFormats: PropTypes.Requireable<PropTypes.InferProps<{
            yearShort: PropTypes.Requireable<string>;
            yearLong: PropTypes.Requireable<string>;
            monthShort: PropTypes.Requireable<string>;
            monthMedium: PropTypes.Requireable<string>;
            monthLong: PropTypes.Requireable<string>;
            dayShort: PropTypes.Requireable<string>;
            dayMedium: PropTypes.Requireable<string>;
            dayMediumLong: PropTypes.Requireable<string>;
            dayLong: PropTypes.Requireable<string>;
            hourShort: PropTypes.Requireable<string>;
            hourLong: PropTypes.Requireable<string>;
            minuteShort: PropTypes.Requireable<string>;
            minuteLong: PropTypes.Requireable<string>;
        }>>;
        resizeDetector: PropTypes.Requireable<PropTypes.InferProps<{
            addListener: PropTypes.Requireable<(...args: any[]) => any>;
            removeListener: PropTypes.Requireable<(...args: any[]) => any>;
        }>>;
        verticalLineClassNamesForTime: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    static defaultProps: {
        sidebarWidth: number;
        rightSidebarWidth: number;
        dragSnap: number;
        minResizeWidth: number;
        lineHeight: number;
        itemHeightRatio: number;
        buffer: number;
        minZoom: number;
        maxZoom: number;
        clickTolerance: number;
        canChangeGroup: boolean;
        canMove: boolean;
        canResize: string;
        useResizeHandle: boolean;
        canSelect: boolean;
        stackItems: boolean;
        traditionalZoom: boolean;
        horizontalLineClassNamesForGroup: null;
        onItemMove: null;
        onItemResize: null;
        onItemClick: null;
        onItemSelect: null;
        onItemDeselect: null;
        onItemDrag: null;
        onCanvasClick: null;
        onItemDoubleClick: null;
        onItemContextMenu: null;
        onCanvasDoubleClick: null;
        onCanvasContextMenu: null;
        onZoom: null;
        resizeDetector: null;
        verticalLineClassNamesForTime: null;
        moveResizeValidator: null;
        dayBackground: null;
        defaultTimeStart: null;
        defaultTimeEnd: null;
        itemTouchSendsClick: boolean;
        style: {};
        className: string;
        keys: {
            groupIdKey: string;
            groupTitleKey: string;
            groupRightTitleKey: string;
            groupLabelKey: string;
            itemIdKey: string;
            itemTitleKey: string;
            itemDivTitleKey: string;
            itemGroupKey: string;
            itemTimeStartKey: string;
            itemTimeEndKey: string;
        };
        timeSteps: {
            second: number;
            minute: number;
            hour: number;
            day: number;
            month: number;
            year: number;
        };
        headerRef: () => void;
        scrollRef: () => void;
        visibleTimeStart: null;
        visibleTimeEnd: null;
        onTimeChange: (visibleTimeStart: any, visibleTimeEnd: any, updateScrollCanvas: any) => void;
        onBoundsChange: null;
        children: null;
        headerLabelFormats: {
            yearShort: string;
            yearLong: string;
            monthShort: string;
            monthMedium: string;
            monthMediumLong: string;
            monthLong: string;
            dayShort: string;
            dayLong: string;
            hourShort: string;
            hourMedium: string;
            hourMediumLong: string;
            hourLong: string;
            time: string;
        };
        subHeaderLabelFormats: {
            yearShort: string;
            yearLong: string;
            monthShort: string;
            monthMedium: string;
            monthLong: string;
            dayShort: string;
            dayMedium: string;
            dayMediumLong: string;
            dayLong: string;
            hourShort: string;
            hourLong: string;
            minuteShort: string;
            minuteLong: string;
        };
        selected: null;
    };
    static childContextTypes: {
        getTimelineContext: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static getDerivedStateFromProps(nextProps: any, prevState: any): {
        items: any;
        groups: any;
    };
    constructor(props: any);
    getChildContext(): {
        getTimelineContext: () => {
            timelineWidth: number;
            visibleTimeStart: any;
            visibleTimeEnd: any;
            canvasTimeStart: number;
            canvasTimeEnd: number;
        };
    };
    getTimelineContext: () => {
        timelineWidth: number;
        visibleTimeStart: any;
        visibleTimeEnd: any;
        canvasTimeStart: number;
        canvasTimeEnd: number;
    };
    getTimelineUnit: () => string;
    getSelected(): any;
    hasSelectedItem(): boolean;
    isItemSelected(itemId: any): any;
    lastTouchDistance: any;
    resize: (props?: Readonly<any>) => void;
    onScroll: (scrollX: any) => void;
    updateScrollCanvas: (visibleTimeStart: any, visibleTimeEnd: any, forceUpdateDimensions: any, items?: any, groups?: any) => void;
    handleWheelZoom: (speed: any, xPosition: any, deltaY: any) => void;
    changeZoom: (scale: any, offset?: number) => void;
    showPeriod: (from: any, to: any) => void;
    selectItem: (item: any, clickType: any, e: any) => void;
    doubleClickItem: (item: any, e: any) => void;
    contextMenuClickItem: (item: any, e: any) => void;
    getTimeFromRowClickEvent: (e: any) => number;
    timeFromItemEvent: (e: any) => number;
    dragItem: (item: any, dragTime: any, newGroupOrder: any) => void;
    dropItem: (item: any, dragTime: any, newGroupOrder: any) => void;
    resizingItem: (item: any, resizeTime: any, edge: any) => void;
    resizedItem: (item: any, resizeTime: any, edge: any, timeDelta: any) => void;
    updatingItem: ({ eventType, itemId, time, edge, newGroupOrder }: {
        eventType: any;
        itemId: any;
        time: any;
        edge: any;
        newGroupOrder: any;
    }) => void;
    columns(canvasTimeStart: any, canvasTimeEnd: any, canvasWidth: any, minUnit: any, timeSteps: any, height: any): JSX.Element;
    handleRowClick: (e: any, rowIndex: any) => void;
    handleRowDoubleClick: (e: any, rowIndex: any) => void;
    handleScrollContextMenu: (e: any, rowIndex: any) => void;
    rows(canvasWidth: any, groupHeights: any, groups: any): JSX.Element;
    items(canvasTimeStart: any, zoom: any, canvasTimeEnd: any, canvasWidth: any, minUnit: any, dimensionItems: any, groupHeights: any, groupTops: any): JSX.Element;
    handleHeaderRef: (el: any) => void;
    scrollHeaderRef: any;
    sidebar(height: any, groupHeights: any): any;
    rightSidebar(height: any, groupHeights: any): any;
    /**
     * check if child of type TimelineHeader
     * refer to for explanation https://github.com/gaearon/react-hot-loader#checking-element-types
     */
    isTimelineHeader: (child: any) => boolean;
    childrenWithProps(canvasTimeStart: any, canvasTimeEnd: any, canvasWidth: any, dimensionItems: any, groupHeights: any, groupTops: any, height: any, visibleTimeStart: any, visibleTimeEnd: any, minUnit: any, timeSteps: any): any;
    renderHeaders: () => JSX.Element;
    getScrollElementRef: (el: any) => void;
    scrollComponent: any;
    container: HTMLDivElement | null | undefined;
}
import React from "react";
import PropTypes from "prop-types";
